// import data types
import { LaydownTypes, Phase } from '@serge/config'
import { Asset, ChannelMapping, ChannelTypes, ForceData, MappingConstraints, MessageMap, Role } from '@serge/custom-types'
import { deepCopy } from '@serge/helpers'
/* Import mock data */
import { watuWargame } from '@serge/mocks'
import { Story } from '@storybook/react/types-6-0'
import React from 'react'
import Assets from '../assets'
import { HexGrid } from '../hex-grid'
import InfoMarkers from '../info-markers'
import data from './data/atlantic-cells'
// Import component files
import Mapping from './index'
import docs from './README.md'
import MappingPropTypes from './types/props'

const forces = watuWargame.data.forces.forces
const platformTypes = (watuWargame.data.platformTypes && watuWargame.data.platformTypes.platformTypes) || []
const overview = watuWargame.data.overview
const annotations = (watuWargame.data.annotations && watuWargame.data.annotations.annotations) || []
const mapChannel = watuWargame.data.channels.channels.find((channel: ChannelTypes) => channel.name === 'mapping') as ChannelMapping
const icons = (watuWargame.data.annotationIcons && watuWargame.data.annotationIcons.markers) || []
const mapping = mapChannel.constraints

const wrapper: React.FC = (storyFn: any) => <div style={{ height: '700px' }}>{storyFn()}</div>

console.clear()

// suitably mangle the data
const blueF = forces[1]
const redF = forces[2]
const greenF = forces[3]
const blue1 = blueF.assets && blueF.assets[0]
if (blue1) {
  blue1.locationPending = LaydownTypes.UmpireLaydown
  blue1.position = undefined
}
const blue2 = blueF.assets && blueF.assets[1]
if (blue2) {
  blue2.locationPending = LaydownTypes.ForceLaydown
  blue2.position = undefined
}

const red1 = redF.assets && redF.assets[0]
if (red1) {
  red1.locationPending = LaydownTypes.ForceLaydown
  red1.position = undefined
}
const red2 = redF.assets && redF.assets[1]
if (red2) {
  red2.locationPending = LaydownTypes.UmpireLaydown
  red2.position = undefined
}

greenF.assets && greenF.assets.forEach((asset: Asset) => {
  asset.locationPending = LaydownTypes.UmpireLaydown
  asset.position = undefined
})

async function fetchMock (): Promise<any> {
  return {
    json: (): any => data
  }
}

const allRoles: string[] = []
forces.forEach((force: ForceData) => {
  force.roles.forEach((role: Role) => {
    allRoles.push(force.uniqid + ' ~ ' + role.roleId)
  })
})

export default {
  title: 'local/Mapping/Laydown',
  component: Mapping,
  decorators: [wrapper],
  parameters: {
    readme: {
      // Show readme before story
      content: docs
    },
    options: {
      // We have no addons enabled in this story, so the addon panel should be hidden
      showPanel: true
    },
    controls: {
      expanded: true
    }
  },
  argTypes: {
    playerRole: {
      name: 'View as',
      defaultValue: allRoles[0],
      control: {
        type: 'select',
        options: allRoles
      }
    },
    phase: {
      name: 'Game phase',
      defaultValue: Phase.Adjudication,
      control: {
        type: 'radio',
        options: [
          Phase.Planning,
          Phase.Adjudication
        ]
      }
    },
    turnNumber: {
      name: 'Turn number',
      defaultValue: 0,
      control: {
        type: 'number'
      }
    },
    wargameInitiated: {
      name: 'Wargame has been initiated',
      defaultValue: false,
      control: {
        type: 'boolean'
      }
    },
    children: {
      table: {
        disable: true
      }
    }
  }
}

const localConstraints: MappingConstraints = deepCopy(mapping)
localConstraints.tileLayer = {
  url: './atlantic_tiles/{z}/{x}/{y}.png',
  attribution: 'Generated by QTiles'
}

const mapPostBack = (messageType: string, payload: MessageMap, channelID?: string | number | undefined): void => {
  console.log('index4 postBack', messageType, payload, channelID)
}

interface StoryPropTypes extends MappingPropTypes {
  showAllowableCells?: boolean
  allowableOrigin?: string
  allowableTerrain?: string
  mappingConstraints: MappingConstraints
}

const Template: Story<StoryPropTypes> = (args) => {
  const {
    playerRole,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    playerForce,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    isGameControl,
    phase,
    wargameInitiated,
    turnNumber,
    ...props
  } = args
  const roleStr: string = playerRole
  // separate out the two elements of the combined role
  const ind = roleStr.indexOf(' ~ ')
  const force = roleStr.substring(0, ind)
  const role = roleStr.substring(ind + 3)
  const isGameControlRole = roleStr === allRoles[0]
  return (
    <Mapping
      playerForce={force}
      isGameControl={isGameControlRole}
      playerRole={role}
      fetchOverride={fetchMock}
      wargameInitiated={wargameInitiated}
      turnNumber={turnNumber}
      phase={phase}
      mapPostBack={mapPostBack}
      {...props}
    />
  )
}

/**
 * DEFAULT VIEW
 */
export const NaturalEarth = Template.bind({})
NaturalEarth.args = {
  forces: forces,
  gameTurnTime: overview.gameTurnTime,
  platforms: platformTypes,
  infoMarkers: annotations,
  markerIcons: icons,
  channel: mapChannel,
  mapBar: true,
  mappingConstraints: localConstraints,
  children: (
    <>
      <HexGrid />
      <Assets />
      <InfoMarkers/>
    </>
  )
}
