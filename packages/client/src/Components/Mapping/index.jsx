import React, { useEffect, useRef } from 'react'

import L from 'leaflet'
import GridImplementation from '../../Helpers/GridImplementation'
import MovementListener from '../../Helpers/MovementListener'
import markerFor from '../../Helpers/markerFor'
import '../../Helpers/zoomHome' 
import '../../Helpers/extensible-toolbar' 


// TODO: This needs to be refactored so we're not just importing the whole file.
import '../../Helpers/mousePosition'

import './styles.scss'
import './leaflet.zoomhome.js'
import 'leaflet-easybutton'

const Mapping = ({ imageTop, imageLeft, imageBottom, imageRight }) => {
  const mapRef = useRef(null)
  const gridRef = useRef(null)
  const coordsRef = useRef(null)
  const platformRef = useRef(null)
  const tileRef = useRef(null)
  let listenerRef = useRef(null)

  useEffect(() => {
    mapRef.current = L.map('map', {
      minZoom: 8,
      maxZoom: 12,
      center: [(imageTop + imageBottom) / 2, (imageLeft + imageRight) / 2],
      zoom: 10,
      zoomDelta: 0.25,
      zoomSnap: 0.25,
      zoomControl: false,
      attributionControl: false,
      zoomAnimation: false
    })

    const zoomHome = L.Control.zoomHome();

    zoomHome.addTo(mapRef.current);  

    const imageBounds = [[imageTop, imageLeft], [imageBottom, imageRight]]

    L.control.homeButton({position: 'topleft', bounds: imageBounds}).addTo(mapRef.current)
    
    var toolbar = L.control.toolBar({position: 'bottomright'}).addTo(mapRef.current)
    console.log(toolbar)

    var toggle = L.easyButton({
      states: [{
        stateName: 'add-markers',
        icon: 'fa-map-marker',
        title: 'add random markers',
        onClick: function(control) {
          mapRef.current.addLayer(platformRef.current);
          control.state('remove-markers');
        }
      }, {
        icon: 'fa-undo',
        stateName: 'remove-markers',
        onClick: function(control) {
          mapRef.current.removeLayer(platformRef.current);
          control.state('add-markers');
        },
        title: 'remove markers'
      }]
    });

    toggle.addTo(mapRef.current)

    const tiledBackdrop = L.tileLayer('https://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png', {
      attribution: 'Data Â© <a href="http://osm.org/copyright">OpenStreetMap</a>'
    })

    

    zoomHome.setHomeBounds(imageBounds)

    tileRef.current = L.tileLayer('./tiles/{z}/{x}/{y}.png', {
      minZoom: 8,
      maxZoom: 12,
      tms: false,
      bounds: imageBounds,
      attribution: 'Generated by QTiles'
    }).addTo(mapRef.current)

    L.control.mousePosition().addTo(mapRef.current)

    gridRef.current = L.layerGroup().addTo(mapRef.current)
    platformRef.current = L.layerGroup().addTo(mapRef.current)

    // note: we don't show the marker layer by default - only when zoomed in
    coordsRef.current = L.layerGroup()

    const overlays = {
      Grid: gridRef.current,
      Coordinates: coordsRef.current,
      Platforms: platformRef.current
    }

    const baseLayers = {
      OpenStreetMap: tiledBackdrop,
      'Tiled image': tileRef.current
    }

    L.control.layers(baseLayers, overlays, {
      collapsed: false
    }).addTo(mapRef.current)

    // only show the markers when zoomed in
    mapRef.current.on('zoomend', () => {
      if (mapRef.current.getZoom() < 11) {
        mapRef.current.removeLayer(coordsRef.current)
      } else {
        mapRef.current.addLayer(coordsRef.current)
      }
    })
    return () => console.log('Map unmounted')
  }, [])

  useEffect(() => {
    /* CREATE THE GRID */
    const delta = 0.0416666
    const origin = L.latLng(14.1166, 42.4166)
    const gridImpl = new GridImplementation({ origin, delta, width: 24, height: 21, markerLayer: coordsRef.current, gridRef: gridRef.current })

    // add hexagons to this map
    gridImpl.addShapesTo(gridRef.current)

    /*
        * CREATE SOME SAMPLE PLATFORMS
        */

    // experiment with back-history
    const trialHistory = ['C05', 'C04', 'C03', 'C02', 'C01']

    // give us a couple of platforms
    const platforms = []
    platforms.push({ loc: gridImpl.hexNamed('C01').centrePos, draggable: true, name: 'Frigate', travelMode: 'Sea', force: 'Blue', allowance: 5, mobile: true, history: trialHistory })
    platforms.push({ loc: gridImpl.hexNamed('P02').centrePos, draggable: true, name: 'Coastal Radar Site', travelMode: 'Land', force: 'Red', mobile: false })
    platforms.push({ loc: gridImpl.hexNamed('P03').centrePos, draggable: true, name: 'Fishing Vessel', travelMode: 'Sea', force: 'Green', allowance: 3, mobile: true })
    platforms.push({ loc: gridImpl.hexNamed('C17').centrePos, draggable: true, name: 'Fixed Wing Aircraft', travelMode: 'Air', force: 'Blue', mobile: true })

    // create class to listen for movement
    listenerRef = new MovementListener(mapRef.current, gridImpl)

    // listen to the platorm markers
    platforms.forEach(spec => {
      const marker = markerFor(spec)
      listenerRef.listenTo(marker)
      platformRef.current.addLayer(marker)
    })
  }, [listenerRef])

  return (
    <div id="map" className="mapping"></div>
  )
}

export default Mapping
